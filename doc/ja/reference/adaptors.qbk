[/
    Copyright 2011 Akira Takahashi
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]
[section:range_adaptors Range Adaptors]

このライブラリは、PStade.OvenやHaskell Preludeライブラリから影響を受けたRangeアダプタを含んでいる。
これらはより強力なRangeプログラミング(関数プログラミング)で必要とされる。
このライブラリは、lazyなシーケンスを容易に、かつ強力に扱うことができる。

``
#include <boost/range/adaptors/iteration.hpp>
#include <boost/range/adaptors/taken.hpp>
#include <boost/range/algorithm/for_each.hpp>
#include <iostream>

int next(int x) { return x * 2; }
void disp(int x) { std::cout << x << ' '; }

boost::for_each(boost::iteration(1, next) | boost::adaptors::taken(5), disp);
  // 1 2 4 8 10
``

また、このライブラリはラムダ式(BLLやC++0x Lambda)の扱いに関しても言及する。
``
#include <boost/range/adaptors/iteration.hpp>
#include <boost/range/adaptors/taken.hpp>
#include <boost/range/algorithm/for_each.hpp>
#include <boost/range/regular.hpp>
#include <boost/lambda/lambda.hpp>
#include <iostream>

using boost::lambda::_1;

void disp(int x) { std::cout << x << ' '; }

boost::for_each(boost::iteration(1, boost::regular(_1 * 2)) | boost::adaptors::taken(5), disp);
  // 1 2 4 8 10
``

regularは、ラムダ式をRegular Conceptにアダプトするための関数である。


regularはイテレータアダプタでラムダ式を使用する場合に常に必要とされるが、regularを記述することは非常に退屈である。このライブラリでは、regular関数のためのシンタックスシュガーを持っている。
``
#include <iostream>
#include <vector>
#include <boost/assign/list_of.hpp>
#include <boost/range/adaptor/regular_extension/filtered.hpp>
#include <boost/range/adaptor/regular_extension/transformed.hpp>
#include <boost/range/algorithm/for_each.hpp>
#include <boost/lambda/lambda.hpp>

void disp(int x) { std::cout << x << ' '; }

int main()
{
    using boost::lambda::_1;
    using namespace boost::adaptors;

    const std::vector<int> v = boost::assign::list_of(1)(2)(3)(4)(5)(6);
    boost::for_each_(v |+ filtered(_1 % 2 == 0) |+ transformed(_1 * 2), disp);
}
``
このライブラリでは、regular演算子であるoperator+()を提供する。
regular演算子は、ラムダ式をより使いやすくする。

[include adaptors/dropped.qbk]
[include adaptors/dropped_while.qbk]
[include adaptors/elements.qbk]
[include adaptors/elements_key.qbk]
[include adaptors/outdirected.qbk]
[include adaptors/taken.qbk]
[include adaptors/taken_while.qbk]

[endsect]

