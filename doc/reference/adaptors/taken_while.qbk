[/
    Copyright 2011 Akira Takahashi
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]
[section taken_while]

`taken_while`, applied to a predicate and the base range, returns the longest prefix (possibly empty) of the range of elements that satisfy the predicate.

[table
    [[Syntax] [Code]]
    [[Pipe] [`rng | boost::adaptors::taken_while(pred)`]]
	[[Regular Operator] [`rng |+ boost::adaptors::taken_while(pred)`]]
    [[Function] [`boost::adaptors::take_while(rng, pred)`]]
]

* [*Precondition:] pred shall not modify referents.
* [*Range Category:] __single_pass_range__
* [*Range Return Type:] boost::taken_while_range<Range>
* [*Returned Range Category:] The minimum of the range category of `rng` and __bidirectional_range__

[heading Header]
``
#include <boost/range/adaptor/taken_while.hpp>
``

[heading Associative Header]
``
#include <boost/range/regular.hpp>
``

[heading Example]
``
#include <boost/range/adaptor/taken_while.hpp>
#include <boost/range/algorithm/for_each.hpp>
#include <boost/assign/list_of.hpp>
#include <iostream>
#include <vector>

void disp(int x) { std::cout << x << ' '; }
bool is_even(int x) { return x % 2 == 0; }

using namespace boost::adaptors;

int main()
{
    const std::vector<int> v = boost::assign::list_of(2)(4)(6)(1)(3);

    boost::for_each(v | taken_while(is_even), disp);
}
``

This would produce the output:
``
2 4 6 
``

[endsect]

