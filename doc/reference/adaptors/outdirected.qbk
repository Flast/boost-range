[/
    Copyright 2011 Akira Takahashi
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]
[section outdirected]

`outdirected` returns a range whose values are iterators of the base range.

[table
    [[Syntax] [Code]]
    [[Pipe] [`rng | boost::adaptors::outdirected`]]
    [[Function] [`boost::adaptors::outdirect(r)`]]
]

* [*Precondition:]  
* [*Range Category:] __single_pass_range__
* [*Range Return Type:] boost::outdirected_range<Range>
* [*Returned Range Category:] The minimum of the range category of `rng` and __forward_range__

[heading Header]
``
#include <boost/range/adaptor/outdirected.hpp>
``

[heading Example]

``
#include <boost/range/adaptor/outdirected.hpp>
#include <boost/range/adaptor/indirected.hpp>
#include <vector>
#include <boost/assign/list_of.hpp>
#include <boost/range/algorithm.hpp>
#include <boost/lambda/lambda.hpp>

using namespace boost::adaptors;
namespace bll = boost::lambda;

void disp(int x) { std::cout << x << ' '; }

int main()
{
	const std::vector<int> v = boost::assign::list_of(3)(1)(4)(2)(5);

	std::vector<std::vector<int>::const_iterator> iters;
	boost::copy(v | outdirected, std::back_inserter(iters));
	boost::sort(iters, *bll::_1 < *bll::_2);

	boost::for_each(iters | indirected, disp);
	std::cout << std::endl;
	boost::for_each(v, disp);
}
``

This would produce the output:
``
1 2 3 4 5 
3 1 4 2 5 
``
[endsect]

